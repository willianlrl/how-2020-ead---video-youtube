<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        xId+z+R/5XhusbZVFL8AAAAASUVORK5CYII=
</value>
  </data>
</root>